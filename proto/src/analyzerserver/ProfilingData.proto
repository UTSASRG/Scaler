syntax = "proto3";

package scaler.analyzerserv;
option java_multiple_files = true;
option java_package = "com.xttechgroup.scaler.analyzerserv";

import "google/protobuf/empty.proto";

// The greeting service definition.
enum ELFSymType{
  STT_NOTYPE = 0;    /* Symbol type is unspecified */
  STT_OBJECT = 1;    /* Symbol is a data object */
  STT_FUNC = 2;    /* Symbol is a code object */
  STT_SECTION = 3;    /* Symbol associated with a section */
  STT_FILE = 4;    /* Symbol's name is file name */
  STT_COMMON = 5;    /* Symbol is a common data object */
  STT_TLS = 6;    /* Symbol is thread-local data object*/
  STT_NUM = 7;    /* Number of defined types.  */
  STT_LOOS = 8;    /* Start of OS-specific */
  STT_GNU_IFUNC = 9;    /* Symbol is indirect code object */
  STT_HIOS = 10;    /* End of OS-specific */
  STT_LOPROC = 11;    /* Start of processor-specific */
  STT_HIPROC = 12;    /* End of processor-specific */
}

enum ELFBindType{
  STB_UNSPECIFIED = 0;
  STB_LOCAL = 1;    /* Local symbol */
  STB_GLOBAL = 2;    /* Global symbol */
  STB_WEAK = 3;    /* Weak symbol */
  STB_NUM = 4;    /* Number of defined types.  */
  STB_LOOS = 5;    /* Start of OS-specific */
  STB_GNU_UNIQUE = 6;    /* Unique symbol.  */
  STB_HIOS = 7;    /* End of OS-specific */
  STB_LOPROC = 8;    /* Start of processor-specific */
  STB_HIPROC = 9;    /* End of processor-specific */
}

message ELFSymInfo{
  int64 scalerId = 1; //id in scaler
  string symbolName = 2; //The name of this symbol
  ELFSymType symbolType = 3; //The bind type of this symbol (in ELF)
  ELFBindType bindType = 4; //The bind type of this symbol (in ELF)
  int64 callerFileId = 5; //The file id of the caller
  int64 symIdInFile = 6; //The id of this symbol in file
  int64 libFileId = 7; //The file id of the library
  int64 gotAddr = 8; //The address of the got table
  bool hooked = 9; //Whether this symbol has been hooked
}

message ELFImgInfo{
  int64  scalerId = 1; //id in scaler
  string filePath = 2; //The full file path of this elf image
  int64 addrStart = 8; //The starting address in memory
  int64 addrEnd = 9; //The ending address in memory
  int64 pltStartAddr = 10;//The starting address of plt section
  int64 pltSecStartAddr = 11;//THe starting address of plt sec section
}

// The request message containing the user's name.

