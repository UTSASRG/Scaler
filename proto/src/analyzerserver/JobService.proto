syntax = "proto3";

package scaler.analyzerserv;
option java_multiple_files = true;
option java_package = "com.xttechgroup.scaler.analyzerserv";

import "google/protobuf/empty.proto";


// The request message containing the user's name.

// The response message containing the greetings
message JobInfoMsg {
  int64 id = 1;
}

enum ELFSymType{
  T_NOTYPE = 0;    /* Symbol type is unspecified */
  T_OBJECT = 1;    /* Symbol is a data object */
  T_FUNC = 2;    /* Symbol is a code object */
  T_SECTION = 3;    /* Symbol associated with a section */
  T_FILE = 4;    /* Symbol's name is file name */
  T_COMMON = 5;    /* Symbol is a common data object */
  T_TLS = 6;    /* Symbol is thread-local data object*/
  T_NUM = 7;    /* Number of defined types.  */
  T_LOOS = 8;    /* Start of OS-specific */
  T_GNU_IFUNC = 9;    /* Symbol is indirect code object */
  T_HIOS = 10;    /* End of OS-specific */
  T_LOPROC = 11;    /* Start of processor-specific */
  T_HIPROC = 12;    /* End of processor-specific */
}

enum ELFBindType{
  B_UNSPECIFIED = 0;
  B_LOCAL = 1;    /* Local symbol */
  B_GLOBAL = 2;    /* Global symbol */
  B_WEAK = 3;    /* Weak symbol */
  B_NUM = 4;    /* Number of defined types.  */
  B_LOOS = 5;    /* Start of OS-specific */
  B_GNU_UNIQUE = 6;    /* Unique symbol.  */
  B_HIOS = 7;    /* End of OS-specific */
  B_LOPROC = 8;    /* Start of processor-specific */
  B_HIPROC = 9;    /* End of processor-specific */
}


message ELFSymbolInfoMsg {
  int64 scalerId = 1;
  string symbolName = 2;
  ELFSymType symbolType = 3;
  ELFBindType bindType = 4;
  int64 libFileId = 5;
  int64 gotAddr = 6;
  bool hooked = 7;
  int64 hookedId = 8;
}

message ELFImgInfoMsg {
  int64 scalerId = 1;
  string filePath = 3;
  int64 addrStart = 4;
  int64 addrEnd = 5;
  int64 pltStartAddr = 6;
  int64 pltSecStartAddr = 7;
  bool valid = 10;

  repeated ELFSymbolInfoMsg symbolInfoInThisFile = 8;

  optional int64 jobId = 9; //scaler run id

}

message BinaryExecResult{
  bool success = 1;
  optional string errorMsg = 2;
}



// The greeting service definition.
service Job {
  // Create a job and save the job id
  rpc createJob (google.protobuf.Empty) returns (JobInfoMsg) {
  }
  //Add elfimage info to current job
  rpc appendElfImgInfo(stream ELFImgInfoMsg) returns(BinaryExecResult){
  }
}